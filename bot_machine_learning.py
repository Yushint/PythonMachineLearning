import telebot
from machine_learning import build_model, convert_image_to_appropriate_format, predict_model

from telebot import types


bot = telebot.TeleBot("%...%")

@bot.message_handler(commands=["start"])
def start(message):
    msg = f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø - –±–æ—Ç, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏."
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    programmer = types.KeyboardButton("–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.üêç")
    neural_prediction = types.KeyboardButton("–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª.ü§ñ")
    donations = types.KeyboardButton("–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è.üíµ")
    markup.add(programmer, neural_prediction, donations)
    bot.send_message(message.chat.id, msg, parse_mode="html", reply_markup=markup)

@bot.message_handler(content_types=["text"])
def text_message_handler(message):
    if message.text == "–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª.ü§ñ":
        bot.send_message(message.from_user.id, text="–ü—Ä–∏—à–ª–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ .jpg –∏–ª–∏ .png.")
    elif message.text == "–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.üêç":
        bot.send_message(message.from_user.id, text="Telegram: @felix_nightingale.")
    elif message.text == "–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è.üíµ":
        bot.send_message(message.from_user.id, text="–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã.")

@bot.message_handler(content_types=["photo"])
def photo_message_handler(message):
    fileID = message.photo[-1].file_id
    file_info = bot.get_file(fileID)
    downloaded_file = bot.download_file(file_info.file_path)
    with open("current_image.jpg", "wb") as new_file:
        new_file.write(downloaded_file)
    bot.send_message(message.from_user.id, text="–ö–∞—Ä—Ç–∏–Ω–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞.")
    bot_prediction = process_image("./current_image.jpg")
    bot.send_message(message.from_user.id, text=f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {bot_prediction}.")
    
def process_image(image):
    model = build_model()
    image_list = convert_image_to_appropriate_format(image)
    result = predict_model(model, image_list, mode="bot")
    return result
    
bot.polling(none_stop=True, interval=0)
